{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER } from './types';\nimport setAuthToken from '../utils/setAuthToken'; //register\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post('/api/users/register', userData).then(res => {\n    //route jump\n    history.push('/login');\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; //Login\n\nexport const loginUser = userData => dispatch => {\n  axios.post('/api/users/login', userData).then(res => {\n    let {\n      token\n    } = res.data;\n    localStorage.setItem('jwtToken', token); // set Token to header\n\n    setAuthToken(token); // decode Token\n\n    const decoded = jwt_decode(token);\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // return deceded token, then submit to redux\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // logout \n\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem('jwtToken'); // clear information of header\n\n  setAuthToken(false); // dispatch to reducer \n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/loki/feature1/hbms-rebuilt/src/actions/authActions.js"],"names":["axios","jwt_decode","GET_ERRORS","SET_CURRENT_USER","setAuthToken","registerUser","userData","history","dispatch","post","then","res","push","catch","err","console","log","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,SAA7C;AACA,OAAOC,YAAP,MAAyB,uBAAzB,C,CACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC3DR,EAAAA,KAAK,CAACS,IAAN,CAAW,qBAAX,EAAiCH,QAAjC,EAA2CI,IAA3C,CAAgDC,GAAG,IAAI;AACnD;AACAJ,IAAAA,OAAO,CAACK,IAAR,CAAa,QAAb;AACH,GAHD,EAGGC,KAHH,CAGSC,GAAG,IAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEAN,IAAAA,QAAQ,CACJ;AAAES,MAAAA,IAAI,EAAEf,UAAR;AAAoBgB,MAAAA,OAAO,EAAEJ,GAAG,CAACK,QAAJ,CAAaC;AAA1C,KADI,CAAR;AAGH,GATD;AAUH,CAXM,C,CAYP;;AACA,OAAO,MAAMC,SAAS,GAAIf,QAAD,IAAcE,QAAQ,IAAG;AAC9CR,EAAAA,KAAK,CAACS,IAAN,CAAW,kBAAX,EAA8BH,QAA9B,EAAwCI,IAAxC,CAA6CC,GAAG,IAAI;AAChD,QAAI;AAAEW,MAAAA;AAAF,QAAYX,GAAG,CAACS,IAApB;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCF,KAAhC,EAFgD,CAGhD;;AACAlB,IAAAA,YAAY,CAACkB,KAAD,CAAZ,CAJgD,CAKhD;;AACA,UAAMG,OAAO,GAAGxB,UAAU,CAACqB,KAAD,CAA1B;AACAd,IAAAA,QAAQ,CAACkB,cAAc,CAACD,OAAD,CAAf,CAAR;AAEH,GATD,EASGZ,KATH,CASSC,GAAG,IAAIN,QAAQ,CACpB;AAAES,IAAAA,IAAI,EAAEf,UAAR;AAAoBgB,IAAAA,OAAO,EAAEJ,GAAG,CAACK,QAAJ,CAAaC;AAA1C,GADoB,CATxB;AAYH,CAbM,C,CAeP;;AACA,OAAO,MAAMM,cAAc,GAAID,OAAD,IAAa;AACvC,SAAO;AACHR,IAAAA,IAAI,EAAEd,gBADH;AAEHe,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAME,UAAU,GAAG,MAAMnB,QAAQ,IAAI;AACxCe,EAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EADwC,CAExC;;AACAxB,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAHwC,CAIxC;;AACAI,EAAAA,QAAQ,CAACkB,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,CANM","sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER } from './types';\nimport setAuthToken from '../utils/setAuthToken';\n//register\nexport const registerUser = (userData, history) => dispatch => {\n    axios.post('/api/users/register',userData).then(res => {\n        //route jump\n        history.push('/login')\n    }).catch(err => {\n        console.log(err);\n\n        dispatch(\n            { type: GET_ERRORS, payload: err.response.data }\n        )\n    })\n}\n//Login\nexport const loginUser = (userData) => dispatch =>{\n    axios.post('/api/users/login',userData).then(res => {\n        let { token } = res.data;\n        localStorage.setItem('jwtToken',token)\n        // set Token to header\n        setAuthToken(token)\n        // decode Token\n        const decoded = jwt_decode(token)\n        dispatch(setCurrentUser(decoded))\n\n    }).catch(err => dispatch(\n        { type: GET_ERRORS, payload: err.response.data }\n    ))\n}\n\n// return deceded token, then submit to redux\nexport const setCurrentUser = (decoded) => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n}\n\n// logout \nexport const logoutUser = () => dispatch => {\n    localStorage.removeItem('jwtToken')\n    // clear information of header\n    setAuthToken(false)\n    // dispatch to reducer \n    dispatch(setCurrentUser({}))\n}"]},"metadata":{},"sourceType":"module"}